name: Deploy to AKS

env:
  IMAGE_NAME: fca
  IMAGE_TAG: ${{github.run_number}}

on:
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZ_CREDS }}
    
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - run: pip install -r requirements.txt
    - run: pytest -vv

    #Security Check - Bandit
    - uses: actions/checkout@v2
    - name: Security check - Bandit
      uses: ioggstream/bandit-report-artifacts@v0.0.2
      with:
        project_path: .
        ignore_failure: true

    - name: Security check report artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Security report
        path: output/security_report.txt

    # Code Coverage
    - name: Generate coverage report
      run: |
        pip install pytest
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml

    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }} 

    #Docker Login
    - name: Docker Images Build And Push
      uses: azure/docker-login@v1
      with:
        login-server: rcregistry.azurecr.io # default: index.docker.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t rcregistry.azurecr.io/fca:${{github.run_number}}
        docker push rcregistry.azurecr.io/fca:${{github.run_number}}
    
    #Container Scan
    - name: Container Scan
      uses: azure/container-scan@v0
      with:
        image-name: rcregistry.azurecr.io/fca:${{github.run_number}} # ${{ env.loginServerUrl }}/ would be empty if it's hosted on dockerhub; ${{ github.sha }} could also be replaced with any desired image tag
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    #Set K8S context
    - name: Azure Kubernetes set context
      uses: Azure/aks-set-context@v1.1
      with:
        # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
        creds: ${{ secrets.AZ_CREDS }}
        # Resource Group Name
        resource-group: aks
        # AKS Cluster Name
        cluster-name: rckluster
    
    #Create K8S Secret
    - name: Create secret in Kubernetes cluster
      uses: Azure/k8s-create-secret@v1.1
      with:
        # Container registry url
        container-registry-url: rcregistry.azurecr.io
        # Container registry username
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        # Container registry password
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        # Type of Kubernetes secret. For example, docker-registry or generic
        secret-type: docker-registry
        # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
        secret-name: docker-image-pull-secret
        # Specify keys and literal values to insert in generic type secret.For example, --from-literal=key1=value1 --from-literal=key2="top secret".


    #Deploy to K8S Cluster
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v1.3
      with:
        # Path to the manifest files which will be used for deployment.
        manifests: |
          k8s/deployment.yaml
          k8s/service.yaml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
        images: rcregistry.azurecr.io/fca:{{github.run_number}}
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
        imagepullsecrets: docker-image-pull-secret
        # deploy/promote/reject
        action: deploy
